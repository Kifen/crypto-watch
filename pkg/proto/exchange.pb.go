// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pkg/proto/exchange.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Symbol struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ExchangeName         string   `protobuf:"bytes,2,opt,name=ExchangeName,proto3" json:"ExchangeName,omitempty"`
	Symbol               string   `protobuf:"bytes,3,opt,name=Symbol,proto3" json:"Symbol,omitempty"`
	Valid                bool     `protobuf:"varint,4,opt,name=valid,proto3" json:"valid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Symbol) Reset()         { *m = Symbol{} }
func (m *Symbol) String() string { return proto.CompactTextString(m) }
func (*Symbol) ProtoMessage()    {}
func (*Symbol) Descriptor() ([]byte, []int) {
	return fileDescriptor_a678a54b61e3becc, []int{0}
}

func (m *Symbol) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Symbol.Unmarshal(m, b)
}
func (m *Symbol) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Symbol.Marshal(b, m, deterministic)
}
func (m *Symbol) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Symbol.Merge(m, src)
}
func (m *Symbol) XXX_Size() int {
	return xxx_messageInfo_Symbol.Size(m)
}
func (m *Symbol) XXX_DiscardUnknown() {
	xxx_messageInfo_Symbol.DiscardUnknown(m)
}

var xxx_messageInfo_Symbol proto.InternalMessageInfo

func (m *Symbol) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Symbol) GetExchangeName() string {
	if m != nil {
		return m.ExchangeName
	}
	return ""
}

func (m *Symbol) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *Symbol) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

type Exchange struct {
	Name                 string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Supported            bool     `protobuf:"varint,2,opt,name=supported,proto3" json:"supported,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Exchange) Reset()         { *m = Exchange{} }
func (m *Exchange) String() string { return proto.CompactTextString(m) }
func (*Exchange) ProtoMessage()    {}
func (*Exchange) Descriptor() ([]byte, []int) {
	return fileDescriptor_a678a54b61e3becc, []int{1}
}

func (m *Exchange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Exchange.Unmarshal(m, b)
}
func (m *Exchange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Exchange.Marshal(b, m, deterministic)
}
func (m *Exchange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Exchange.Merge(m, src)
}
func (m *Exchange) XXX_Size() int {
	return xxx_messageInfo_Exchange.Size(m)
}
func (m *Exchange) XXX_DiscardUnknown() {
	xxx_messageInfo_Exchange.DiscardUnknown(m)
}

var xxx_messageInfo_Exchange proto.InternalMessageInfo

func (m *Exchange) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Exchange) GetSupported() bool {
	if m != nil {
		return m.Supported
	}
	return false
}

type AlertReq struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ExchangeName         string   `protobuf:"bytes,2,opt,name=ExchangeName,proto3" json:"ExchangeName,omitempty"`
	Req                  *Req     `protobuf:"bytes,3,opt,name=req,proto3" json:"req,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AlertReq) Reset()         { *m = AlertReq{} }
func (m *AlertReq) String() string { return proto.CompactTextString(m) }
func (*AlertReq) ProtoMessage()    {}
func (*AlertReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_a678a54b61e3becc, []int{2}
}

func (m *AlertReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AlertReq.Unmarshal(m, b)
}
func (m *AlertReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AlertReq.Marshal(b, m, deterministic)
}
func (m *AlertReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AlertReq.Merge(m, src)
}
func (m *AlertReq) XXX_Size() int {
	return xxx_messageInfo_AlertReq.Size(m)
}
func (m *AlertReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AlertReq.DiscardUnknown(m)
}

var xxx_messageInfo_AlertReq proto.InternalMessageInfo

func (m *AlertReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AlertReq) GetExchangeName() string {
	if m != nil {
		return m.ExchangeName
	}
	return ""
}

func (m *AlertReq) GetReq() *Req {
	if m != nil {
		return m.Req
	}
	return nil
}

type AlertRes struct {
	Req                  *AlertReq `protobuf:"bytes,1,opt,name=req,proto3" json:"req,omitempty"`
	Price                float32   `protobuf:"fixed32,2,opt,name=price,proto3" json:"price,omitempty"`
	Message              string    `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *AlertRes) Reset()         { *m = AlertRes{} }
func (m *AlertRes) String() string { return proto.CompactTextString(m) }
func (*AlertRes) ProtoMessage()    {}
func (*AlertRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_a678a54b61e3becc, []int{3}
}

func (m *AlertRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AlertRes.Unmarshal(m, b)
}
func (m *AlertRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AlertRes.Marshal(b, m, deterministic)
}
func (m *AlertRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AlertRes.Merge(m, src)
}
func (m *AlertRes) XXX_Size() int {
	return xxx_messageInfo_AlertRes.Size(m)
}
func (m *AlertRes) XXX_DiscardUnknown() {
	xxx_messageInfo_AlertRes.DiscardUnknown(m)
}

var xxx_messageInfo_AlertRes proto.InternalMessageInfo

func (m *AlertRes) GetReq() *AlertReq {
	if m != nil {
		return m.Req
	}
	return nil
}

func (m *AlertRes) GetPrice() float32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *AlertRes) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type Req struct {
	Symbol               string   `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Action               string   `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	Price                float32  `protobuf:"fixed32,3,opt,name=price,proto3" json:"price,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Req) Reset()         { *m = Req{} }
func (m *Req) String() string { return proto.CompactTextString(m) }
func (*Req) ProtoMessage()    {}
func (*Req) Descriptor() ([]byte, []int) {
	return fileDescriptor_a678a54b61e3becc, []int{4}
}

func (m *Req) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Req.Unmarshal(m, b)
}
func (m *Req) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Req.Marshal(b, m, deterministic)
}
func (m *Req) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Req.Merge(m, src)
}
func (m *Req) XXX_Size() int {
	return xxx_messageInfo_Req.Size(m)
}
func (m *Req) XXX_DiscardUnknown() {
	xxx_messageInfo_Req.DiscardUnknown(m)
}

var xxx_messageInfo_Req proto.InternalMessageInfo

func (m *Req) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *Req) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *Req) GetPrice() float32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func init() {
	proto.RegisterType((*Symbol)(nil), "proto.Symbol")
	proto.RegisterType((*Exchange)(nil), "proto.Exchange")
	proto.RegisterType((*AlertReq)(nil), "proto.AlertReq")
	proto.RegisterType((*AlertRes)(nil), "proto.AlertRes")
	proto.RegisterType((*Req)(nil), "proto.Req")
}

func init() {
	proto.RegisterFile("pkg/proto/exchange.proto", fileDescriptor_a678a54b61e3becc)
}

var fileDescriptor_a678a54b61e3becc = []byte{
	// 341 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x51, 0x4d, 0x4f, 0xc2, 0x40,
	0x14, 0xcc, 0xb6, 0x80, 0xe5, 0x01, 0x9a, 0x3c, 0x0d, 0x69, 0x08, 0x07, 0xec, 0xa9, 0x17, 0xc1,
	0xa0, 0x89, 0x17, 0x2f, 0xc6, 0x78, 0x20, 0x26, 0xc6, 0x2c, 0x89, 0x5e, 0xf4, 0x50, 0xda, 0x0d,
	0x54, 0x81, 0xb6, 0xbb, 0x8b, 0x91, 0xdf, 0xe4, 0x9f, 0x34, 0xdd, 0x0f, 0x90, 0x1e, 0x3d, 0xb5,
	0x33, 0xfb, 0xe6, 0xcd, 0xec, 0x2c, 0xf8, 0xf9, 0xe7, 0x7c, 0x94, 0xf3, 0x4c, 0x66, 0x23, 0xf6,
	0x1d, 0x2f, 0xa2, 0xf5, 0x9c, 0x0d, 0x15, 0xc4, 0xba, 0xfa, 0x04, 0x1f, 0xd0, 0x98, 0x6e, 0x57,
	0xb3, 0x6c, 0x89, 0xc7, 0xe0, 0xa4, 0x89, 0x4f, 0x06, 0x24, 0xac, 0x53, 0x27, 0x4d, 0x30, 0x80,
	0xf6, 0x83, 0x91, 0x3c, 0x45, 0x2b, 0xe6, 0x3b, 0x03, 0x12, 0x36, 0xe9, 0x01, 0x87, 0x5d, 0xab,
	0xf6, 0x5d, 0x75, 0x6a, 0x77, 0x9d, 0x41, 0xfd, 0x2b, 0x5a, 0xa6, 0x89, 0x5f, 0x1b, 0x90, 0xd0,
	0xa3, 0x1a, 0x04, 0xb7, 0xe0, 0x59, 0x35, 0x22, 0xd4, 0xd4, 0x56, 0xa2, 0x74, 0xea, 0x1f, 0xfb,
	0xd0, 0x14, 0x9b, 0x3c, 0xcf, 0xb8, 0x64, 0x89, 0xb2, 0xf3, 0xe8, 0x9e, 0x08, 0xde, 0xc0, 0xbb,
	0x5b, 0x32, 0x2e, 0x29, 0x2b, 0xfe, 0x95, 0xb5, 0x0f, 0x2e, 0x67, 0x85, 0x0a, 0xda, 0x1a, 0x83,
	0x6e, 0x61, 0x48, 0x59, 0x41, 0x4b, 0x3a, 0x78, 0xdf, 0x6d, 0x17, 0x78, 0xae, 0x27, 0x89, 0x9a,
	0x3c, 0x31, 0x93, 0xd6, 0x5b, 0x8d, 0x97, 0x17, 0xcc, 0x79, 0x1a, 0x6b, 0x27, 0x87, 0x6a, 0x80,
	0x3e, 0x1c, 0xad, 0x98, 0x10, 0xd1, 0x9c, 0x99, 0x3e, 0x2c, 0x0c, 0x1e, 0xc1, 0x2d, 0x73, 0x77,
	0xa1, 0x21, 0x74, 0x5f, 0xfa, 0xde, 0x06, 0x95, 0x7c, 0x14, 0xcb, 0x34, 0x5b, 0x9b, 0xe4, 0x06,
	0xed, 0x6d, 0xdc, 0x3f, 0x36, 0xe3, 0x1f, 0x02, 0xad, 0x7b, 0xbe, 0xcd, 0x65, 0xf6, 0x1a, 0xc9,
	0x78, 0x81, 0xd7, 0xd0, 0xa6, 0xac, 0xd8, 0x30, 0x21, 0x9f, 0x55, 0x8c, 0x6a, 0xe4, 0x5e, 0x85,
	0x10, 0x21, 0xb9, 0x24, 0x78, 0x03, 0xa7, 0x13, 0x61, 0x1b, 0x9a, 0xda, 0x9a, 0x77, 0x62, 0x7b,
	0xd2, 0xab, 0x12, 0x78, 0x01, 0x9d, 0x89, 0xd0, 0x0f, 0xfd, 0x52, 0xbe, 0x2b, 0x76, 0xcc, 0x84,
	0xe6, 0x7a, 0x87, 0x70, 0xd6, 0x50, 0xe8, 0xea, 0x37, 0x00, 0x00, 0xff, 0xff, 0x87, 0x8f, 0x5b,
	0x8c, 0x8b, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CryptoWatchClient is the client API for CryptoWatch service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CryptoWatchClient interface {
	RequestPrice(ctx context.Context, opts ...grpc.CallOption) (CryptoWatch_RequestPriceClient, error)
	IsExchangeSupported(ctx context.Context, in *Exchange, opts ...grpc.CallOption) (*Exchange, error)
	IsSymbolValid(ctx context.Context, in *Symbol, opts ...grpc.CallOption) (*Symbol, error)
}

type cryptoWatchClient struct {
	cc grpc.ClientConnInterface
}

func NewCryptoWatchClient(cc grpc.ClientConnInterface) CryptoWatchClient {
	return &cryptoWatchClient{cc}
}

func (c *cryptoWatchClient) RequestPrice(ctx context.Context, opts ...grpc.CallOption) (CryptoWatch_RequestPriceClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CryptoWatch_serviceDesc.Streams[0], "/proto.CryptoWatch/RequestPrice", opts...)
	if err != nil {
		return nil, err
	}
	x := &cryptoWatchRequestPriceClient{stream}
	return x, nil
}

type CryptoWatch_RequestPriceClient interface {
	Send(*AlertReq) error
	Recv() (*AlertRes, error)
	grpc.ClientStream
}

type cryptoWatchRequestPriceClient struct {
	grpc.ClientStream
}

func (x *cryptoWatchRequestPriceClient) Send(m *AlertReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cryptoWatchRequestPriceClient) Recv() (*AlertRes, error) {
	m := new(AlertRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cryptoWatchClient) IsExchangeSupported(ctx context.Context, in *Exchange, opts ...grpc.CallOption) (*Exchange, error) {
	out := new(Exchange)
	err := c.cc.Invoke(ctx, "/proto.CryptoWatch/IsExchangeSupported", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptoWatchClient) IsSymbolValid(ctx context.Context, in *Symbol, opts ...grpc.CallOption) (*Symbol, error) {
	out := new(Symbol)
	err := c.cc.Invoke(ctx, "/proto.CryptoWatch/IsSymbolValid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CryptoWatchServer is the server API for CryptoWatch service.
type CryptoWatchServer interface {
	RequestPrice(CryptoWatch_RequestPriceServer) error
	IsExchangeSupported(context.Context, *Exchange) (*Exchange, error)
	IsSymbolValid(context.Context, *Symbol) (*Symbol, error)
}

// UnimplementedCryptoWatchServer can be embedded to have forward compatible implementations.
type UnimplementedCryptoWatchServer struct {
}

func (*UnimplementedCryptoWatchServer) RequestPrice(srv CryptoWatch_RequestPriceServer) error {
	return status.Errorf(codes.Unimplemented, "method RequestPrice not implemented")
}
func (*UnimplementedCryptoWatchServer) IsExchangeSupported(ctx context.Context, req *Exchange) (*Exchange, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsExchangeSupported not implemented")
}
func (*UnimplementedCryptoWatchServer) IsSymbolValid(ctx context.Context, req *Symbol) (*Symbol, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsSymbolValid not implemented")
}

func RegisterCryptoWatchServer(s *grpc.Server, srv CryptoWatchServer) {
	s.RegisterService(&_CryptoWatch_serviceDesc, srv)
}

func _CryptoWatch_RequestPrice_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CryptoWatchServer).RequestPrice(&cryptoWatchRequestPriceServer{stream})
}

type CryptoWatch_RequestPriceServer interface {
	Send(*AlertRes) error
	Recv() (*AlertReq, error)
	grpc.ServerStream
}

type cryptoWatchRequestPriceServer struct {
	grpc.ServerStream
}

func (x *cryptoWatchRequestPriceServer) Send(m *AlertRes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cryptoWatchRequestPriceServer) Recv() (*AlertReq, error) {
	m := new(AlertReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CryptoWatch_IsExchangeSupported_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Exchange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoWatchServer).IsExchangeSupported(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CryptoWatch/IsExchangeSupported",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoWatchServer).IsExchangeSupported(ctx, req.(*Exchange))
	}
	return interceptor(ctx, in, info, handler)
}

func _CryptoWatch_IsSymbolValid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Symbol)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoWatchServer).IsSymbolValid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CryptoWatch/IsSymbolValid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoWatchServer).IsSymbolValid(ctx, req.(*Symbol))
	}
	return interceptor(ctx, in, info, handler)
}

var _CryptoWatch_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CryptoWatch",
	HandlerType: (*CryptoWatchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsExchangeSupported",
			Handler:    _CryptoWatch_IsExchangeSupported_Handler,
		},
		{
			MethodName: "IsSymbolValid",
			Handler:    _CryptoWatch_IsSymbolValid_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RequestPrice",
			Handler:       _CryptoWatch_RequestPrice_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/proto/exchange.proto",
}
